import numpy as np
import random
import math
import time
import psutil

# Parameters
d_min, d_max = 0.015, 0.125  # Range of possible diameters
initial_temp = 0.95  # Initial temperature
cooling_rate = 0.98  # Cooling rate adjusted for slower cooling
iterations = 10000  # Number of iterations
flow_rate = 0.54  # Flow rate through the pipe
kinematic_viscosity = 0.00000113  # Kinematic viscosity dependent on fluid temperature
relative_roughness = 0.015  # Relative roughness depending on material type

# Define cost values and penalties
C = [1]  # Cost
l = [3.56]  # Length of each segment
E_p, I_p, L_p, R_p, P_p = 1.14, 2.0, 1.43, 2, 1  # Penalties

# List of available commercial diameters
commercial_diameters = [0.015, 0.020, 0.025, 0.032, 0.040, 0.050, 0.063, 0.075, 0.090, 0.100, 0.110, 0.125]

def pipe_cost(d, C, l, E_p, I_p, L_p, R_p, P_p):
    return sum(C[i] * l[i] + (E_p + I_p + L_p + R_p + P_p) * d[i] for i in range(len(d)))

def flow_velocity(d):
    return 4 * flow_rate * 0.001 / (math.pi * d**2)

def Reynolds(d):
    return (flow_velocity(d) * d) / kinematic_viscosity

def friction_factor(d):
    reynolds = Reynolds(d)
    return 0.25 / (math.log10((relative_roughness / d) / 3.7 + (5.74 / reynolds**0.9)))**2

def pressure_loss(d, l):
    return (friction_factor(d) * (l * (flow_velocity(d)**2)) / (d * 2 * 9.81))

def find_closest_commercial_diameter(d):
    return min(commercial_diameters, key=lambda x: abs(x - d))

def simulated_annealing(d_min, d_max, temp, cooling_rate, max_iter, C, l, E_p, I_p, L_p, R_p, P_p):
    start_time = time.time()
    cpu_start = time.process_time()
    memory_start = psutil.Process().memory_info().rss / (1024 ** 2)  # MB
    
    current_d = [random.uniform(d_min, d_max) for _ in range(len(C))]
    best_d = current_d[:]
    best_cost = pipe_cost(current_d, C, l, E_p, I_p, L_p, R_p, P_p)
    iterations_without_improvement = 0
    real_iterations = 0
    cost_history = []
    
    for i in range(max_iter):
        real_iterations += 1
        temp *= cooling_rate
        if temp < 0.01 or iterations_without_improvement >= 200:
            break
        
        perturbation = (d_max - d_min) * (temp**1.5 / initial_temp)
        new_d = [max(d_min, min(current_d[j] + random.uniform(-perturbation, perturbation), d_max)) for j in range(len(current_d))]
        
        velocities = [flow_velocity(d) for d in new_d]
        losses = [pressure_loss(new_d[j], l[j]) for j in range(len(l))]
        
        if temp > 10:
            relaxation_factor = 1.2
        else:
            relaxation_factor = 1.0
        
        if any(v < (0.3 * relaxation_factor) or v > (3 * relaxation_factor) for v in velocities):
            continue
        if any(loss > (0.1 * l[j] * relaxation_factor) for j, loss in enumerate(losses)):
            continue
        
        new_cost = pipe_cost(new_d, C, l, E_p, I_p, L_p, R_p, P_p)
        cost_history.append(new_cost)
        delta = new_cost - best_cost
        
        if delta < 0 or math.exp(-delta / (temp + 1e-10)) > random.random():
            current_d = new_d[:]
            if new_cost < best_cost:
                best_d = new_d[:]
                best_cost = new_cost
                iterations_without_improvement = 0
            else:
                iterations_without_improvement += 1
    
    end_time = time.time()
    cpu_end = time.process_time()
    memory_end = psutil.Process().memory_info().rss / (1024 ** 2)
    total_time = end_time - start_time
    cpu_used = cpu_end - cpu_start
    memory_used = memory_end - memory_start
    
    return best_d, best_cost, total_time, cpu_used, memory_used, real_iterations, cost_history

# Execute the algorithm
optimal_d, optimal_cost, total_time, cpu_used, memory_used, real_iterations, cost_history = simulated_annealing(
    d_min, d_max, initial_temp, cooling_rate, iterations, C, l, E_p, I_p, L_p, R_p, P_p
)

optimal_commercial_d = [find_closest_commercial_diameter(d) for d in optimal_d]

# Display results
print(f"Optimal diameter: {optimal_d} meters")
print(f"Closest commercial diameter: {optimal_commercial_d} meters")
print(f"Minimum cost: {optimal_cost:.4f}")
print(f"Optimal velocities: {[flow_velocity(d) for d in optimal_d]} m/s")
print(f"Optimal pressure losses: {[pressure_loss(d, l[0]) for d in optimal_d]} meters")
print(f"Total processing time: {total_time:.6f} seconds")
print(f"CPU time used: {cpu_used:.6f} seconds")
print(f"Memory used: {memory_used:.6f} MB")
